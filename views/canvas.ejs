<!DOCTYPE html>
<html>
<head>
    <title>Shared Drawing Editor</title>
<!--
    <link rel='stylesheet' href='/stylesheets/style.css' />
-->
    <script src="/socket.io/socket.io.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script> 
</head>
  

<script>

        $(document).ready(function() {
        //var url = "http://#{HOST}:#{PORT}";
        var socket = io.connect();	
        socket.on('connect', function() {
	   //console.log('socket connected');
           socket.emit('subscribe', '<%=drawingid %>'); 
	});
       
 
	 
	var canvas = document.querySelector('#paint');
	
	var ctx = canvas.getContext('2d');
	
	var sketch = document.querySelector('#sketch');
	var sketch_style = getComputedStyle(sketch);
	canvas.width = parseInt(sketch_style.getPropertyValue('width'));
	canvas.height = parseInt(sketch_style.getPropertyValue('height'));
	
	
	// Creating a tmp canvas
	var tmp_canvas = document.createElement('canvas');
	var tmp_ctx = tmp_canvas.getContext('2d');
	tmp_canvas.id = 'tmp_canvas';
	tmp_canvas.width = canvas.width;
	tmp_canvas.height = canvas.height;
	
	sketch.appendChild(tmp_canvas);

	var mouse = {x: 0, y: 0};
	var last_mouse = {x: 0, y: 0};
	
	// Pencil Points
	var ppts = [];

   	socket.on('message', function(message) {
	   //console.log('---------- MESSAGE RECEIVED -------------:'+JSON.stringify(message));
	   if (message == 'mouseup') {
	   	//console.log('---------- MOUSE UP EVENT RECEIVED -------------:'+message);
		mouseupHandler();
	   } else {
	       drawHandler(message);
	   }
	});
	
	// Mouse Capturing Work 
	tmp_canvas.addEventListener('mousemove', function(e) {
		mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
		mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;
	}, false);
	
	
	// Drawing on Paint App 
	tmp_ctx.lineWidth = 5;
	tmp_ctx.lineJoin = 'round';
	tmp_ctx.lineCap = 'round';
	tmp_ctx.strokeStyle = 'blue';
	tmp_ctx.fillStyle = 'blue';
	
	tmp_canvas.addEventListener('mousedown', function(e) {
		tmp_canvas.addEventListener('mousemove', onPaint, false);
		
		mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
		mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;

		
		ppts.push({x: mouse.x, y: mouse.y});
	
		console.log('mousedown :'+ppts);
		
		onPaint();
	}, false);
	
	tmp_canvas.addEventListener('mouseup', function() {
		tmp_canvas.removeEventListener('mousemove', onPaint, false);
		socket.emit('publish', '<%=drawingid%>', 'mouseup');
		mouseupHandler();
	}, false);

	var mouseupHandler = function() {
		// Writing down to real canvas now
		ctx.drawImage(tmp_canvas, 0, 0);
		// Clearing tmp canvas
		tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);
		// Emptying up Pencil Points
		ppts = [];
	}

	var onPaint = function() {
	        //console.log('onPaint called x:'+mouse.x+', y:'+mouse.y);	

		// Saving all the points in an array
                var loc = {x: mouse.x, y: mouse.y};
		ppts.push(loc);

		socket.emit('publish', '<%=drawingid%>', ppts);
	        
                drawHandler(ppts);
		
		
	};

        var drawHandler = function(ppts) {
	   if (ppts.length < 3) {
                        var b = ppts[0];
                        tmp_ctx.beginPath();
                        //ctx.moveTo(b.x, b.y);
                        //ctx.lineTo(b.x+50, b.y+50);
                        tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);
                        tmp_ctx.fill();
                        tmp_ctx.closePath();
                        
                        return;
                }
                
	        //console.log('message listener starts drawing:'+ppts[0].x+", "+ppts[0].y);
                // Tmp canvas is always cleared up before drawing.
                tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);
                
                tmp_ctx.beginPath();
                tmp_ctx.moveTo(ppts[0].x, ppts[0].y);
                
                for (var i = 1; i < ppts.length - 2; i++) {
                        var c = (ppts[i].x + ppts[i + 1].x) / 2;
                        var d = (ppts[i].y + ppts[i + 1].y) / 2;
                        
                        tmp_ctx.quadraticCurveTo(ppts[i].x, ppts[i].y, c, d);
                }
                
                // For the last 2 points
                tmp_ctx.quadraticCurveTo(
                        ppts[i].x,
                        ppts[i].y,
                        ppts[i + 1].x,
                        ppts[i + 1].y
                );
                tmp_ctx.stroke();
	}; 
   });	
</script>

<style>
html, body {
	width: 100%;
	height: 100%;
}

#sketch {
	border: 10px solid gray;
	height: 100%;
	position: relative;
}

#tmp_canvas {
	position: absolute;
	left: 0px; right: 0;
	bottom: 0; top: 0;
	cursor: crosshair;
}
</style>
<body>
Welcome to Shared Drawing 
<div id="sketch">
	<canvas id="paint"></canvas>
</div>

</body>
</html>
